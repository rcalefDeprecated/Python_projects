#! /usr/bin/env python
import sys
import re
import collections
import operator
import argparse

import fasta_fastq_parser


def parse_arg(args):
	argparser = argparse.ArgumentParser(description = ("Converts a FASTA"
		"file, along with a separate '.qual' file containing quality "
	        "information in a FASTA-like format, into a FASTQ file. The "
		"'.qual' file must contain the same number of entries as the"
	        " FASTA file, with each entry beginning with the same header"
	        " as it's corresponding FASTA sequence. Quality information "
		"must be encoded as decimal numbers, not ASCII characters."))
	score_format = argparser.add_mutually_exclusive_group(
		required=True)
	score_format.add_argument('--33', action = 'store_false',
		dest = 'phred64', help = ("Specifies FASTQ quality"
		" scores to be outputted in Phred+33 format."))
	score_format.add_argument('--64', action = 'store_true',
		dest = 'phred64', help = ("Specifies FASTQ quality"
		" scores to be outputted in Phred+64 format."))
	argparser.add_argument('--in', action = 'store',dest='in_file',
		help =("Name of FASTA file to be read in."))
	argparser.add_argument('--out',action='store', 
	        help=("Desired name of FASTQ output file. Will"
	        " overwrite existing file of the same name."))
	argparser.add_argument('--qual',action='store',
	        help=("Name of '.qual' input file."))
	options = argparser.parse_args()
	print(vars(options))
	return options
	

def main(args):
	opts=parse_arg(args)
	fasta_in = open(opts.in_file,'r')
	qual_in = open(opts.qual, 'r')
	fastq_out = open(opts.out, 'w')
	offset=33
	if opts.phred64: offset=64
	for sequence in fasta_fastq_parser.read_fasta_with_quality(fasta_in,qual_in):
		print(sequence)
		fastq_out.write("@%s   %s%s\n+%s   %s" % 
		    (sequence.identifier,sequence.comment,sequence.sequence
		    ,sequence.identifier,sequence.comment))
		for score in sequence.scores:
			fastq_out.write(chr(score + offset))
		fastq_out.write("\n")
#		for i in range(len(sequence.sequence)):
#			if i % 80 == 0: print
#			sys.stdout.write(sequence.sequence[i])
#                print
#	print_dict(words, order)
	fasta_in.close()
	qual_in.close()
	fastq_out.close()



if __name__ == "__main__":
	sys.exit(main(sys.argv))
